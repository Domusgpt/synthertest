// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for the native synthesizer engine
class SynthEngineBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SynthEngineBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SynthEngineBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Synther Audio Engine - Public FFI API
  ///
  /// This header defines the C API for the Synther audio engine,
  /// designed for use with Flutter FFI bindings.
  int InitializeSynthEngine(
    int sampleRate,
    int bufferSize,
    double initialVolume,
  ) {
    return _InitializeSynthEngine(
      sampleRate,
      bufferSize,
      initialVolume,
    );
  }

  late final _InitializeSynthEnginePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Float)>>(
      'InitializeSynthEngine');
  late final _InitializeSynthEngine =
      _InitializeSynthEnginePtr.asFunction<int Function(int, int, double)>();

  void ShutdownSynthEngine() {
    return _ShutdownSynthEngine();
  }

  late final _ShutdownSynthEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ShutdownSynthEngine');
  late final _ShutdownSynthEngine =
      _ShutdownSynthEnginePtr.asFunction<void Function()>();

  int NoteOn(
    int note,
    int velocity,
  ) {
    return _NoteOn(
      note,
      velocity,
    );
  }

  late final _NoteOnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('NoteOn');
  late final _NoteOn = _NoteOnPtr.asFunction<int Function(int, int)>();

  int NoteOff(
    int note,
  ) {
    return _NoteOff(
      note,
    );
  }

  late final _NoteOffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('NoteOff');
  late final _NoteOff = _NoteOffPtr.asFunction<int Function(int)>();

  int ProcessMidiEvent(
    int status,
    int data1,
    int data2,
  ) {
    return _ProcessMidiEvent(
      status,
      data1,
      data2,
    );
  }

  late final _ProcessMidiEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedChar, ffi.UnsignedChar,
              ffi.UnsignedChar)>>('ProcessMidiEvent');
  late final _ProcessMidiEvent =
      _ProcessMidiEventPtr.asFunction<int Function(int, int, int)>();

  int SetParameter(
    int parameterId,
    double value,
  ) {
    return _SetParameter(
      parameterId,
      value,
    );
  }

  late final _SetParameterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Float)>>(
          'SetParameter');
  late final _SetParameter =
      _SetParameterPtr.asFunction<int Function(int, double)>();

  double GetParameter(
    int parameterId,
  ) {
    return _GetParameter(
      parameterId,
    );
  }

  late final _GetParameterPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>('GetParameter');
  late final _GetParameter =
      _GetParameterPtr.asFunction<double Function(int)>();

  int LoadGranularBuffer(
    ffi.Pointer<ffi.Float> buffer,
    int length,
  ) {
    return _LoadGranularBuffer(
      buffer,
      length,
    );
  }

  late final _LoadGranularBufferPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Float>, ffi.Int)>>(
      'LoadGranularBuffer');
  late final _LoadGranularBuffer = _LoadGranularBufferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, int)>();

  double GetBassLevel() {
    return _GetBassLevel();
  }

  late final _GetBassLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetBassLevel');
  late final _GetBassLevel = _GetBassLevelPtr.asFunction<double Function()>();

  double GetMidLevel() {
    return _GetMidLevel();
  }

  late final _GetMidLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetMidLevel');
  late final _GetMidLevel = _GetMidLevelPtr.asFunction<double Function()>();

  double GetHighLevel() {
    return _GetHighLevel();
  }

  late final _GetHighLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetHighLevel');
  late final _GetHighLevel = _GetHighLevelPtr.asFunction<double Function()>();

  double GetAmplitudeLevel() {
    return _GetAmplitudeLevel();
  }

  late final _GetAmplitudeLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetAmplitudeLevel');
  late final _GetAmplitudeLevel =
      _GetAmplitudeLevelPtr.asFunction<double Function()>();

  double GetDominantFrequency() {
    return _GetDominantFrequency();
  }

  late final _GetDominantFrequencyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'GetDominantFrequency');
  late final _GetDominantFrequency =
      _GetDominantFrequencyPtr.asFunction<double Function()>();
}

const int SYNTH_PARAM_MASTER_VOLUME = 0;

const int SYNTH_PARAM_MASTER_MUTE = 1;

const int SYNTH_PARAM_FILTER_CUTOFF = 10;

const int SYNTH_PARAM_FILTER_RESONANCE = 11;

const int SYNTH_PARAM_FILTER_TYPE = 12;

const int SYNTH_PARAM_ATTACK_TIME = 20;

const int SYNTH_PARAM_DECAY_TIME = 21;

const int SYNTH_PARAM_SUSTAIN_LEVEL = 22;

const int SYNTH_PARAM_RELEASE_TIME = 23;

const int SYNTH_PARAM_REVERB_MIX = 30;

const int SYNTH_PARAM_DELAY_TIME = 31;

const int SYNTH_PARAM_DELAY_FEEDBACK = 32;

const int SYNTH_PARAM_GRANULAR_ACTIVE = 40;

const int SYNTH_PARAM_GRANULAR_GRAIN_RATE = 41;

const int SYNTH_PARAM_GRANULAR_GRAIN_DURATION = 42;

const int SYNTH_PARAM_GRANULAR_POSITION = 43;

const int SYNTH_PARAM_GRANULAR_PITCH = 44;

const int SYNTH_PARAM_GRANULAR_AMPLITUDE = 45;
